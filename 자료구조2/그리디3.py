"""
각 아이템은 무게 w, 가치 v를 가진다. 배낭에 담을 수 있는 최대 무게는 W
아이템은 쪼개서 담을 수 있다. 최대 가치를 구하시오. (그리디)

w = 50 : 이 배낭은 50kg까지 담을 수 있다
items = [(60, 10), (100, 20), (120, 30)]  # (value, weight)

당신은 무게 제한이 W인 배낭을 하나 가지고 있고,
N개의 아이템이 있다. 각 아이템은 다음과 같은 속성을 가진다:
value (가치): 아이템을 배낭에 넣었을 때 얻게 되는 이익
weight (무게): 아이템의 무게

이때, 각 아이템은 분할해서 넣을 수 있다.
가치를 최대로 담았을때 어느 정도 까지 담을 수 있는지?

목적: 배낭에 담을 수 있는 아이템들의 조합 중 총 가치(value)의 합을 최대화하는 것
가치/무게 비율로 아이템 정렬 (내림차순)- kg당 가치를 구해서 그거 부터 다 담는다
하나씩 넣되, 전체를 다 넣을 수 없으면 남은 용량만큼 비례해서 담는다.
누적 가치 합산 → 최종 정답

W = 50
             가치  무게    가치는 0 부터 시작해서 하나씩 수행할때마다 + 
                          무게는 배낭에서 빼야한다
60/10  = 6    60   10     배낭에 다 담을 수 있을지 확인한다.   W가 50 이므로 배낭에 담는다 
                          남은 무게는40 임
100/20 = 5   160   20     남은무게는 20임 
120/30 = 4   160+ 120*20/30 =160 + 80 = 240 

"""



def knapsack(items, W):
    # 가치밀도 기준 내림차순 정렬
    items.sort(key=lambda x: x[0]/x[1], reverse=True)
    #print(items)
    #차례대로 배낭에 담기
    value = 0  
    # if items[0][1] < W:
    #     value = items[0][0]
    #     W -=  items[0][1]
    # else:
    #     #kg당 가치는 가치/무게 
    #     kg = items[0][0]/items[0][1] 
    #     value =  kg * W 
    for i in range(0, len(items)):
        if items[i][1] < W:
            value += items[i][0]
            W -=  items[i][1]
        else:
            #kg당 가치는 가치/무게 
            kg = items[i][0]/items[i][1] 
            value +=  kg * W
            W -= W 
            break #무개가 초과가 되었음

    return value

# 실행
print(knapsack([(120, 30), (60, 10), (120, 10), (100, 20) ], 50))  # 출력: 240.0

