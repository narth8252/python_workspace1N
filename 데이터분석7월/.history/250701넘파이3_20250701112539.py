import numpy as np

#range함수대신 arange(시작값,엔딩값,증감치)
#for나 list불펼요
print( np.arange(1,11)) #[ 1  2  3  4  5  6  7  8  9 10]
print( np.arange(1,11, 0.1))
print( np.arange(1,11,2))
print( np.arange(0, 1, 0.2))
print( np.arange(10, 0, -1))
"""
[ 1  2  3  4  5  6  7  8  9 10]
[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3
  2.4  2.5  2.6  2.7  2.8  2.9  3.   3.1  3.2  3.3  3.4  3.5  3.6  3.7
  3.8  3.9  4.   4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.   5.1
  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9  6.   6.1  6.2  6.3  6.4  6.5
  6.6  6.7  6.8  6.9  7.   7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9
  8.   8.1  8.2  8.3  8.4  8.5  8.6  8.7  8.8  8.9  9.   9.1  9.2  9.3
  9.4  9.5  9.6  9.7  9.8  9.9 10.  10.1 10.2 10.3 10.4 10.5 10.6 10.7
 10.8 10.9]
[1 3 5 7 9]
[0.  0.2 0.4 0.6 0.8]
[10  9  8  7  6  5  4  3  2  1]
"""
print("---------------------------")
#복사하기-디폴트 원칙이 얕은복사
a = np.arange(1,11)
b = a #얕은복사 - 서로가 참조복사임.
#깊은복사는 컴프리헨션
a[0] = 100
print(a) #[100   2   3   4   5   6   7   8   9  10]
print(b) #[100   2   3   4   5   6   7   8   9  10]

c = a.copy()#깊은복사 hard copy, 리스트랑넘파이헷갈리는데 넘파이임.
c[0]=-1
print(a) #[100   2   3   4   5   6   7   8   9  10]
print(c) #[-1  2  3  4  5  6  7  8  9 10]
"""
[100   2   3   4   5   6   7   8   9  10]
[100   2   3   4   5   6   7   8   9  10]
[100   2   3   4   5   6   7   8   9  10]
[-1  2  3  4  5  6  7  8  9 10]
"""
print("---------------------------")
#메모리 할당을해서 요소값이 0이나 1로 채워진 nd어레이타입만들기
a = np.zeros(10)
print(a) #[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

#2차원 매개변수를 튜플(())로주면됨
b = np.zeros((3,4))
print(b)
"""
 [[0. 0.]
  [0. 0.]
  [0. 0.]
  [0. 0.]]
"""
print("---------3차원------------------")
#3차원 매개변수를 튜플(())로주면됨
# 3차원 배열을 생성합니다. 크기는 (3, 4, 2) →
# "3개의 4행 2열짜리 2차원 배열"이 겹쳐 있는 구조입니다.
# 모든 값이 0으로 채워집니다.
c = np.zeros((3,4,2))
print(c)
"""
[[[0. 0.]
  [0. 0.]
  [0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]
  [0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]
  [0. 0.]
  [0. 0.]]]
"""
print("---------------------------")
# 3행 10열(3x10) 크기의 모든 요소가 1로 채워진 2차원 numpy 배열(ndarray)을 생성
c = np.ones((3,10))
print(c)
"""
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
"""
print("---------------------------")
#요소가 랜덤인 배열 또는 행렬생성 많이씀.
# 원하는 크기(shape)의 랜덤 실수 배열을 만들어줍니다
#머신러닝,딥러닝 가짜데이터,차트 만들어서 공부할때 많이 씀.
#평균0 분산1인 가우스분포(정규분포)를 따르는 난수를 발생
# 0 이상 1 미만의 난수(무작위 실수)**로 채워진 numpy 배열을 생성해서 출력
#알아서 내가 숫자주면 창출해냄(얘 매개변수는튜플아니라 괄호에 넣지마)
# np.random.rand(10) → 0~1 사이의 난수 10개로 이루어진 1차원 배열
# np.random.rand(2,3) → 0~1 사이의 난수로 채워진 2행 3열(2x3) 2차원 배열
# np.random.rand(2,3,4) → 0~1 사이의 난수로 채워진 2x3x4 크기의 3차원 배열
print( np.random.rand(10))
print( np.random.rand(2,3))
print( np.random.rand(2,3,4))
"""
[0.93796915 0.77027527 0.45957184 0.73509061 0.30545052 0.59301922
 0.38249347 0.04231177 0.9857053  0.72754968]
[[0.82268896 0.95213865 0.49399389]
 [0.79100422 0.0049498  0.22141595]]
[[[0.62011464 0.53518769 0.14763957 0.35055438]
  [0.18810999 0.05779213 0.49832243 0.93516693]
  [0.63802324 0.78439927 0.23316009 0.52977063]]

 [[0.14653844 0.32192881 0.58286383 0.53588336]
  [0.9612691  0.3383154  0.14717032 0.63454338]
  [0.69764824 0.7349081  0.6278991  0.17827375]]]
"""
print("---------------------------")
#정수발생 .
#np.random.randint(low, high, size) low~high값을 size만큼 만든다.
# 10 이상 20 미만의 정수 난수를 생성
# 10 이상 20 미만의 정수 4개로 이루어진 1차원 배열을 만듭니다.
print(np.random.randint(10, 20, 4)) #[11 17 18 14]
print("---------------------------")
# 10 이상 20 미만의 정수로 채워진 2행 3열(2x3) 2차원 배열
print(np.random.randint(10, 20, (2,3)))
# [[13 14 17]
#  [16 11 15]]
print("---------------------------")

#★ numpy배열의 차원(모양, shape)변환 중요함.
a = np.arange(10)# 0부터 9까지의 1차원 배열 생성: [0 1 2 3 4 5 6 7 8 9]
a.reshape(2,5)
print(a) #[0 1 2 3 4 5 6 7 8 9]
a = a.reshape(5,2)
print(a)
"""
[[0 1]
 [2 3]
 [4 5]
 [6 7]
 [8 9]]
"""
print("---------------------------")
#a = np.array