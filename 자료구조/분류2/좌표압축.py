"""
1 3 2       1 > 3   1> 2     3>2
12 50 31   12 > 50  12>31    50>31 


좌표 압축(좌표압축, Coordinate Compression)은 
값의 범위가 크지만 값의 개수는 많지 않을 때, 
이 값들을 작은 범위의 값으로 대체해서 효율적인 처리를 가능하게 하는 기법입니다. 
주로 정렬, 이진 탐색,세그먼트 트리, 펜윅 트리(구간 합 트리) 등과 함께 사용됩니다.

[1000, 9999, 1000, 1234, 9999]
[0,     2,     0,    1,    2 ]

 수의 크기와 무관하게, 연산이 작은 정수 범위 안에서 이뤄지기 때문에 정렬, 
 인덱싱, 세그먼트 트리 같은 자료구조에서 효율적으로 작동합니다.

큰 숫자를 작은 범위로 매핑하여 효율적 연산
세그먼트 트리나 펜윅 트리처럼 인덱스 기반 구조에서 메모리 절약
값 자체보다는 '상대적인 순서'가 중요할 때 사용

좌표 압축은 정렬과 이분 탐색이 필요하다.
압축용 배열에서 중복 요소는 제거한다. (중복 제거 )
입력 받은 배열을 압축용 배열에 오름차순 정렬한다. (오름차순정렬)
압축용 배열에 새로운 인덱스를 부여한다. (순서를 주는 것)
[1000, 9999, 1234]  1.중복제거  파이썬의 경우 set(list타입)
[1000, 1234, 9999]  

[1000, 9999, 1000, 1234, 9999]
[0, 2, 0, 1, 2]

int [] arr = {2, 4, -10, 4, -9};
int [] arr_tmp = {-10, -9, 2, 4, 4}; 
//중복요소를 제거한다.
//오름차순 정렬
{-10, -9, 2, 4}
[0] [1] [2] [3]
 
//원래 배열에 압축용 배열의 index 를 붙이면 끝. 
-> 2, 3, 0, 3, 1
"""
# 1 3 2
# 12 50 31

def getIndex(a):
    b = [x for x in a] #복사  --원본데이터 보호 => deepcopy 
    b = list(set(b)) #중복제거 
    b.sort()  #정렬
    print(b)
    index = []
    for i in a:
        ii = b.index(i)
        index.append(ii)
    return index 

print( getIndex([1,3,2]), getIndex([12, 50,31]))


numList = [[20, 10, 30],
            [10, 20, 60],
            [80, 25, 79],
            [30, 50, 80],
            [80, 25, 81]]

for i in range(0, len(numList)): 
    print( getIndex(i))

    